name: Build iOS App

on:
  push:
    branches: [eas-ios-generic, main]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        run: npm run build
      
      - name: Setup iOS project
        run: |
          npx cap add ios
          npx cap sync ios
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios/App
      
      - name: Install CocoaPods dependencies
        run: |
          cd ios/App
          pod install
      
      - name: Import Code Signing Certificate
        env:
          P12_BASE64: ${{ secrets.IOS_DIST_CERT_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_DIST_CERT_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p actions build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          echo "$P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
          rm certificate.p12
      
      - name: Import Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          # Debug: Check if secret is set
          if [ -z "$PROVISIONING_PROFILE_BASE64" ]; then
            echo "Error: IOS_PROVISIONING_PROFILE_BASE64 secret is not set"
            exit 1
          fi

          echo "Secret length: ${#PROVISIONING_PROFILE_BASE64} characters"

          # Decode and save the provisioning profile (remove any whitespace first)
          echo "$PROVISIONING_PROFILE_BASE64" | tr -d '\n\r ' | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

          # Verify the file was created and has content
          PROFILE_SIZE=$(wc -c < ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | tr -d ' ')
          echo "Decoded profile size: $PROFILE_SIZE bytes"

          if [ "$PROFILE_SIZE" -eq 0 ]; then
            echo "Error: Provisioning profile is empty after decoding"
            exit 1
          fi

          # Extract and display profile info for debugging
          echo "Provisioning profile imported successfully"
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | grep -A1 "Name\|UUID\|TeamIdentifier" | head -20
      
      - name: Build iOS App
        run: |
          cd ios/App

          # Verify provisioning profile exists
          PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "Error: Provisioning profile not found at $PROFILE_PATH"
            exit 1
          fi

          # Extract provisioning profile UUID for precise matching
          PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin 2>&1)

          if [ -z "$PROFILE_UUID" ]; then
            echo "Error: Could not extract UUID from provisioning profile"
            echo "Falling back to profile name"
            PROFILE_SPECIFIER="*[expo] com.onolo.admin AdHoc 1760491748998"
          else
            echo "Using provisioning profile UUID: $PROFILE_UUID"
            PROFILE_SPECIFIER="$PROFILE_UUID"
          fi

          # Build with verbose output and capture errors
          set +e
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $PWD/build/App.xcarchive \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM=LUHV7R927U \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_SPECIFIER" \
            PRODUCT_BUNDLE_IDENTIFIER=com.onolo.admin \
            CODE_SIGN_IDENTITY="Apple Distribution: Malesela Kekana (LUHV7R927U)" \
            archive 2>&1 | tee build.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}

          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "=== BUILD FAILED ==="
            echo "Exit code: $BUILD_EXIT_CODE"
            echo ""
            echo "=== Last 100 lines of build output ==="
            tail -100 build.log
            echo ""
            echo "=== Searching for errors ==="
            grep -i "error:" build.log | tail -20 || echo "No errors found in log"
            exit $BUILD_EXIT_CODE
          fi
      
      - name: Export IPA
        run: |
          cd ios/App
          xcodebuild -exportArchive \
            -archivePath $PWD/build/App.xcarchive \
            -exportPath $PWD/build \
            -exportOptionsPlist ../../scripts/ExportOptions.plist
      
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: ios/App/build/*.ipa
          retention-days: 30

